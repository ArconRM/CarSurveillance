// <auto-generated />
using System;
using CarSurveillance.Server.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarSurveillance.Server.Migrations
{
    [DbContext(typeof(CarSurveillanceContext))]
    [Migration("20251018110717_RemovedOddPropsFromWeatherRecord")]
    partial class RemovedOddPropsFromWeatherRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarSurveillance.Server.Entities.CarPassRecord", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ConfidenceProcessed")
                        .HasColumnType("double precision");

                    b.Property<double>("ConfidenceRaw")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateTextProcessed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateTextRaw")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uuid");

                    b.ToTable("CarPassRecords");
                });

            modelBuilder.Entity("CarSurveillance.Server.Entities.WeatherRecord", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CloudCover")
                        .HasColumnType("integer");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDay")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<long>("LocalTimeEpoch")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("PrecipitationMm")
                        .HasColumnType("double precision");

                    b.Property<double>("PressureMb")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureC")
                        .HasColumnType("double precision");

                    b.Property<double>("VisibilityKm")
                        .HasColumnType("double precision");

                    b.Property<int>("WeatherCode")
                        .HasColumnType("integer");

                    b.Property<string>("WeatherCondition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WindGustKph")
                        .HasColumnType("double precision");

                    b.Property<double>("WindKph")
                        .HasColumnType("double precision");

                    b.HasKey("Uuid");

                    b.ToTable("WeatherRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
